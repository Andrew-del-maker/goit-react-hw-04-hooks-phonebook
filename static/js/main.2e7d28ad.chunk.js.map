{"version":3,"sources":["Components/Form/Form.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numInputId","handleInputChange","e","currentTarget","value","reset","preventDefault","htmlFor","type","pattern","title","id","required","onChange","Filter","ContactList","contacts","onDelete","map","onClick","initialContacts","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","contact","includes","alert","prevState","event","normalizeFilter","toLowerCase","getVisibleContacts","onDeleteContact","contactId","prevContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e7d28ad.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Form.css';\nimport {  useState } from \"react\";\nimport shortid from \"shortid\";\n\nfunction Form({onSubmit}) {\n\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n    \n    const nameInputId = shortid.generate();\n    const numInputId = shortid.generate();\n\n    const handleInputChange = (e) => {\n        const { value, name } = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value)\n                break\n            case 'number':\n                setNumber(value)\n                break\n            default: return\n        }\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit(name,number);\n        reset();\n    }\n    const reset = () => {\n        setNumber('');\n        setName('');\n    }\n    \n    \n        return (\n            <form onSubmit={handleSubmit}>\n          <label htmlFor={nameInputId}>Name</label>\n          <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value= {name}\n          id= {nameInputId}\n          required\n          onChange={handleInputChange}\n          />\n          <br/>\n          <br/>\n          <label htmlFor={numInputId}>Number</label>\n          <input\n            type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value= {number}\n          id ={numInputId}\n          required\n          onChange={handleInputChange}\n          />\n          <br/>\n          <br/>\n          <button type=\"submit\" >Add contact</button>\n        </form>\n        );\n    \n\n}\n\nForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nexport default Form;","import PropTypes from 'prop-types';\n\nconst Filter = ({value, onChange}) => (\n    <label>\n        <br />\n          Find contacts by name <br /><br /> \n          <input type='text' value={value} onChange={onChange}></input>\n    </label>\n);\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter;","import PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDelete }) => (\n    <ul>\n          {contacts.map(({name,id,number}) =>\n              <li key={id}>{name} {number}\n                  <button type=\"button\" onClick={() => onDelete(id)}>Delete</button>\n              </li>\n            )}\n    </ul>\n)\n\nContactList.propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onDelete: PropTypes.func.isRequired\n}\n\nexport default ContactList;","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport './App.css';\nimport Form from \"./Components/Form\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\n\nconst initialContacts = [\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n]\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts});\n    \n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n  \n  const addContact = ( name, number ) => {\n    \n    const contact = {\n      id: shortid(),\n      name,\n      number,\n    };\n\n    if (contacts.map(contact => contact.name).includes(name)) {\n      alert(`${name} is already in contacs.`)\n    } else {\n      setContacts(prevState => [contact, ...prevState]);\n    }\n  };\n      \n\n  const  changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    \n\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  }\n  \n\n  const deleteContact = contactId => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId));\n  };\n\n  return (\n      <div>\n\n        <h1>Phonebook</h1>\n\n        <Form onSubmit={addContact} />\n\n        <h2>Contacts</h2>\n\n        <Filter\n          value={filter}\n          onChange={changeFilter}\n          />\n\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n        \n      </div>\n    )\n  }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}